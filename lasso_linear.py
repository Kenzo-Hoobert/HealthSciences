# -*- coding: utf-8 -*-
"""Lasso/Linear.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lwn7RubOXB00tlj2Dtc1erugpJrJtqUq
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge, RidgeCV, Lasso
from sklearn.preprocessing import StandardScaler

# Part 1 ---------------------------------------------------------------------------------

# I *will* get her that camera
# I * will* make her happy
# I *will* do it

df = pd.read_excel('/content/HealthSciences_Dataset.xlsx', 'data')
df.head()

df_backup = df

df.columns[2:5]

count = 0
for i in df.columns:
  print(f'{count}: {i}')
  count += 1

these_columns = [2, 3, 4, 6, 7, 8, 10, 11, 47, 48, 49]

for i in these_columns:
  new_dict = {}
  new_column = df.iloc[:, i]

  for category in new_column.unique():
    new_dict[category] = []
  keys = list(new_dict.keys())
  keys.sort()
  sorted_dict = {i: new_dict[i] for i in keys}

  for key in keys:
    for value in new_column:
      if key == value:
        new_dict[key].append(1)
      else:
        new_dict[key].append(0)

  for category, values in new_dict.items():
    df = pd.concat([df, pd.Series(values, name = str(category) + '_' + str(i))], axis = 1)

df.columns

df.to_csv('HS_OneHotEncoding.csv')

new_dict.keys()

df['admission_type_id'].unique()

features = df.columns[[2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 47, 48, 49]]
target = df.columns[21]

#X and y values
X = df[features].values
y = df[target].values

#split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

print("The dimension of X_train is {}".format(X_train.shape))
print("The dimension of X_test is {}".format(X_test.shape))
#Scale features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

corr_plot = df.corr()

fig, ax = plt.subplots(figsize=(10,10))
sns.heatmap(corr_plot, annot = True, ax = ax)
plt.title('Correlation of Numerical Values')
plt.show()

df.corr()

# Part 2 -----------------------------------------------------------------------------------------------

df = pd.read_csv('/content/HS_OneHotEncoding (1).csv')
df.head()

count = 0
for i in df.columns:
  print(count, i)
  count += 1

new_list = [10]

for i in range(13, 19):
  new_list.append(i)

for i in range(51, 219):
  new_list.append(i)

new_list[0:11]

our_df = df.iloc[:, new_list]

for i in our_df.columns:
  print(f'`{i}`,')

import matplotlib.pyplot as plt
import math

race_dict = {}
for i in df['race']:
  if i not in race_dict.keys():
    race_dict[i] = 0
  else:
    race_dict[i] += 1

#for key in race_dict.keys():
#  race_dict[key] = math.log(race_dict[key])


fig, ax = plt.subplots()
bars = ax.bar(race_dict.keys(), race_dict.values())
ax.bar_label(bars)

plt.xticks(list(race_dict.keys())[:10], rotation=90)
plt.ylabel('Number of Patients (Log10 Scale)')
plt.title('Diabetes-Diagnosed Patients by Race')
plt.show()



new_list = [9]

for i in range(13, 22):
  new_list.append(i)

for i in range(51, 217):
  new_list.append(i)

new_list[0:11]

df.iloc[:, new_list]

# I *will* get her that camera
# I * will* make her happy
# I *will* do it

for y in df.columns:
  new_new_list = []
  for x in df[y]:
    if 'E' in str(x):
      new_new_list.append(x.replace('E', ''))
    else:
      new_new_list.append(x)

  df[y] = new_new_list

for y in df.columns:
  for x in df[y]:
    if x == 'E878':
      print(y)
      break

df = df.dropna()

features = df.columns[new_list]
target = df.columns[22]

#X and y values
X = df[features].values
y = df[target].values

#split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state = 17)

print("The dimension of X_train is {}".format(X_train.shape))
print("The dimension of X_test is {}".format(X_test.shape))
#Scale features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

for y in df.columns:
  new_new_list = []
  for x in df[y]:
    if x == np.NaN:
      new_new_list.append(asdf)
    else:
      new_new_list.append(x)

  df[y] = new_new_list

#Model
lr = LinearRegression()

#Fit model
lr.fit(X_train, y_train)

#predict
#prediction = lr.predict(X_test)

#actual
actual = y_test

train_score_lr = lr.score(X_train, y_train)
test_score_lr = lr.score(X_test, y_test)

print("The train score for lr model is {}".format(train_score_lr))
print("The test score for lr model is {}".format(test_score_lr))


#Ridge Regression Model
ridgeReg = Ridge(alpha=10)

ridgeReg.fit(X_train,y_train)

#train and test scorefor ridge regression
train_score_ridge = ridgeReg.score(X_train, y_train)
test_score_ridge = ridgeReg.score(X_test, y_test)

print("\nRidge Model............................................\n")
print("The train score for ridge model is {}".format(train_score_ridge))
print("The test score for ridge model is {}".format(test_score_ridge))

import pandas as pd

df = pd.read_csv('/content/HS_OneHotEncoding (1).csv')

for i in df.columns:
  print(f'`{i}` +')

for y in df.columns:
  count = 0
  for x in df[y]:
    if type(x) != int and type(x) != float:
      count += 1
  print(f'{y} NA Count: {count}\n')

for y in df.columns:
  count = 0
  for x in df[y]:
    if x == '?':
      count += 1
  print(f'{y} ? Count: {count}\n')

